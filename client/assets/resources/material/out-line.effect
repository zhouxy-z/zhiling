 v// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.9 }
        linecolor : { value : [1., 1., 0, 1.], editor: { type: "color" } }
        radius: { value: 0.01 }
        inner: { value: 0 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;
  out vec4 v_wp;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif
    v_wp = pos;

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>

  in vec4 color;
  in vec4 v_wp;

  uniform MXD {
    vec4 linecolor;
    float radius;
    float inner;
  };

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    vec4 accum = vec4(0.0);
    vec4 normal = vec4(1,1,1,1);

    #if USE_TEXTURE
      normal *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      #if IS_GRAY
        float gray  = 0.2126 * normal.r + 0.7152 * normal.g + 0.0722 * normal.b;
        normal.r = normal.g = normal.b = gray;
      #endif
      accum += CCSampleWithAlphaSeparated(cc_spriteTexture, vec2(uv0.x - radius, uv0.y - radius));
      accum += CCSampleWithAlphaSeparated(cc_spriteTexture, vec2(uv0.x + radius, uv0.y - radius));
      accum += CCSampleWithAlphaSeparated(cc_spriteTexture, vec2(uv0.x + radius, uv0.y + radius));
      accum += CCSampleWithAlphaSeparated(cc_spriteTexture, vec2(uv0.x - radius, uv0.y + radius));
    #endif

    //将描边图设置为imgColor色，例如imgColor是红色，则描边图就是红色
    accum.r = linecolor.r * accum.a;
    accum.g = linecolor.g * accum.a;
    accum.b = linecolor.b * accum.a;
    accum.a = linecolor.a * accum.a;
    
    //accum * (1.0- normal.a)相当于描边图和原图重叠的地方都为透明，这样只剩下描边
    //normal 还是原图
    //accum * (1.0- normal.a) + normal 就是描边+原图了
    normal = accum * (1.0- normal.a) + normal * inner;

    ALPHA_TEST(normal);
    return normal;
  }
}%
